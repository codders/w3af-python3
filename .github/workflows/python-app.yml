# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Unit tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Test w4af (not slow)

    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        group: [1, 2, 3, 4, 5, 6, 7, 8]

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pipenv'
    - name: Increase ulimit
      run: echo 'fs.file-max=1048576' | sudo tee -a /etc/sysctl.conf && sudo sysctl -p && ulimit -n 10000 && ulimit -a
    - name: Install Gtk
      run: sudo apt-get update && sudo apt-get install -y libgirepository1.0-dev gir1.2-gtk-3.0 libgtk-3-dev gir1.2-pango-1.0 libpango1.0-dev gir1.2-gtksource-4 libgtksourceview-4-dev libicu-dev gir1.2-webkit2-4.0 libwebkit2gtk-4.0-dev graphviz libssl-dev libffi-dev libsqlite3-dev libxml2-dev git
    - name: Install node packages
      run: npm install
    - name: Install pipenv
      run: |
        python -m pip install --upgrade pipenv wheel
    - name: Install dependencies
      run: |
        pipenv install
    - name: Core unittests
      uses: GabrielBB/xvfb-action@v1
      with:
        run: |
          pipenv run pytest --cov=w4af --splits 8 --group ${{ matrix.group }} -m "not moth and not wavsep and not w4af_moth and not sqlmap and not mcir and not wivet and not phpmoth and not fails and not git and not gui and not integration and not ci_ignore and not slow and not wordpress and not modsecurity"
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage${{ matrix.group }}
        path: .coverage

  integration_test:
    name: w4af integration tests with docker environments

    runs-on: ubuntu-latest
    needs: [test]
    timeout-minutes: 40
    strategy:
      matrix:
        group: [moth,w4af_moth,sqlmap,mcir,wivet,phpmoth]


    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pipenv'
    - name: Add test routes
      run: |
        ./w4af/tests/add-test-routes.sh
    - uses: isbang/compose-action@v1.3.2
      with:
        compose-file: "./w4af/tests/docker-compose.yml"
        services: ${{ matrix.group }}
    - name: Install Gtk
      run: sudo apt-get update && sudo apt-get install -y libgirepository1.0-dev gir1.2-gtk-3.0 libgtk-3-dev gir1.2-pango-1.0 libpango1.0-dev gir1.2-gtksource-4 libgtksourceview-4-dev libicu-dev gir1.2-webkit2-4.0 libwebkit2gtk-4.0-dev graphviz libssl-dev libffi-dev libsqlite3-dev libxml2-dev git
    - name: Install node packages
      run: npm install
    - name: Install pipenv
      run: |
        python -m pip install --upgrade pipenv wheel
    - name: Install dependencies
      run: |
        pipenv install
    - name: Integration tests
      uses: GabrielBB/xvfb-action@v1
      with:
        run: |
          pipenv run pytest --cov=w4af -m "${{ matrix.group }} and not fails"
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-${{ matrix.group }}
        path: .coverage

  slow_test:
    name: Test w4af (slow tests)

    runs-on: ubuntu-latest
    timeout-minutes: 55
    strategy:
      matrix:
        group: [1, 2, 3, 4]

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pipenv'
    - name: Install Gtk
      run: sudo apt-get update && sudo apt-get install -y libgirepository1.0-dev gir1.2-gtk-3.0 libgtk-3-dev gir1.2-pango-1.0 libpango1.0-dev gir1.2-gtksource-4 libgtksourceview-4-dev libicu-dev gir1.2-webkit2-4.0 libwebkit2gtk-4.0-dev graphviz libssl-dev libffi-dev libsqlite3-dev libxml2-dev git
    - name: Install node packages
      run: npm install
    - name: Install pipenv
      run: |
        python -m pip install --upgrade pipenv wheel
    - name: Install dependencies
      run: |
        pipenv install
    - name: Core unittests
      uses: GabrielBB/xvfb-action@v1
      with:
        run: |
          pipenv run pytest --cov=w4af -m "slow_group${{matrix.group}}"
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-slow${{matrix.group}}
        path: .coverage

  external_test:
    name: Test w4af (external tests)

    runs-on: ubuntu-latest
    timeout-minutes: 55
    strategy:
      matrix:
        group: [1, 2, 3, 4]

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: "3.10"
        cache: 'pipenv'
    - name: Install Gtk
      run: sudo apt-get update && sudo apt-get install -y libgirepository1.0-dev gir1.2-gtk-3.0 libgtk-3-dev gir1.2-pango-1.0 libpango1.0-dev gir1.2-gtksource-4 libgtksourceview-4-dev libicu-dev gir1.2-webkit2-4.0 libwebkit2gtk-4.0-dev graphviz libssl-dev libffi-dev libsqlite3-dev libxml2-dev git xvfb
    - name: Install node packages
      run: npm install
    - name: Install pipenv
      run: |
        python -m pip install --upgrade pipenv wheel
    - name: Install dependencies
      run: |
        pipenv install
    - name: External tests
      uses: nick-fields/retry@v2
      with:
        timeout_minutes: 45
        continue_on_error: true
        max_attempts: 1
        command: |
          xvfb-run --auto-servernum pipenv run pytest --cov=w4af -m "external_group${{matrix.group}}"
    - name: Upload coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-external${{matrix.group}}
        path: .coverage


  coverage:
    name: Upload coverage to codecov
    needs: [test, slow_test, external_test, integration_test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
          cache: 'pipenv'
      - name: Install deps
        run: |
          python -m pip install --upgrade pipenv wheel
          pipenv install
      - name: Download all artifacts
        # Downloads coverage1, coverage2, etc.
        uses: actions/download-artifact@v2
      - name: Run coverage
        run: |
          pipenv run coverage combine coverage*/.coverage*
          pipenv run coverage report --fail-under=55
          pipenv run coverage xml
      - name: "Upload coverage to Codecov"
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
